var ArrayModule;(function (ArrayModule) {    function range(j) {        return Array.apply(null, Array(j)).map(function (_, i) {            return i;        });    }    ArrayModule.range = range;    function printToConsole(s) {        console.log(s);    }    ArrayModule.printToConsole = printToConsole;})(ArrayModule || (ArrayModule = {}));var _range = (j) => Array.from({ length: j }, (x, i) => i);function take(list, n) {    return list.slice(0, n);}function rangeTo(size, startAt = 0) {    return [...Array(size).keys()].map((i) => i + startAt);}function indexOfLargest(a) {    var lowest = 0;    for (var i = 1; i < a.length; i++) {        if (a[i] > a[lowest])            lowest = i;    }    return lowest;}function indexOfSmallest(a) {    var lowest = 0;    for (var i = 1; i < a.length; i++) {        if (a[i] < a[lowest])            lowest = i;    }    return lowest;}function amax(list) {    return Math.max.apply(null, list);}function amin(list) {    return Math.min.apply(null, list);}function zipUpTwoArray(arr1, arr2) {    var zippedArray = [];    for (let i = 0; i < arr1.length; i++) {        var added = arr1[i] + arr2[i];        zippedArray.push(added);    }    return zippedArray;}function zipUpTwoArrayInToPairs(arr1, arr2) {    var zippedArray = [];    for (let i = 0; i < arr1.length; i++) {        var pair = [arr1[i], arr2[i]];        zippedArray.push(pair);    }    return zippedArray;}const lineChartOptions = {    title: {        text: null    },    chart: {        type: "line"    },    xAxis: {        type: "datetime"    },    credits: {        enabled: false    },    plotOptions: {        column: {            pointPadding: 0,            borderWidth: 0        },        series: {            animation: false,        },    },};const gridLight = {    colors: ["#7cb5ec", "#f7a35c", "#90ee7e", "#7798BF", "#aaeeee", "#ff0066", "#eeaaee", "#55BF3B", "#DF5353", "#7798BF", "#aaeeee"],    xAxis: {        gridLineWidth: 1,        labels: {            style: {                fontSize: '12px'            }        }    },    yAxis: {        gridLineColor: '#ffbf80',        minorGridLineColor: '#ffe6cc',        minorTickInterval: 'auto',        title: {            style: {                textTransform: 'uppercase'            }        },        labels: {            style: {                fontSize: '12px'            }        }    },};const baseOptions = {    title: {        text: null    },    credits: {        enabled: false    },    plotOptions: {        series: {            animation: false,        },    }};function addChart(series, containerName, chartOptions) {    let options = {        series: series    };    var opts = Object.assign(Object.assign({}, options), chartOptions);    var fullOpts = jQuery.extend(true, opts, baseOptions);    var container = $("#" + containerName);    container.highcharts(fullOpts);}function percentageToHsl(percentage, hue0, hue1) {    var hue = (percentage * (hue1 - hue0)) + hue0;    return 'hsl(' + hue + ', 100%, 50%)';}function percentageToWhite(percentage, hue0) {    var L = 100 - (percentage * 50);    return 'hsl(' + hue0 + ', 100%, ' + L + '%)';}function differenceLabelWithNow(earlierDate) {    return differenceLabel(Date.now(), earlierDate);}function differenceLabel(nowDate, earlierDate) {    var delta = Math.abs(nowDate - earlierDate) / 1000;    var days = Math.floor(delta / 86400);    delta -= days * 86400;    var hours = Math.floor(delta / 3600) % 24;    delta -= hours * 3600;    var minutes = Math.floor(delta / 60) % 60;    delta -= minutes * 60;    var seconds = Math.round(delta % 60);    let label = `${days} Days, ${hours} Hours, ${minutes} Minutes, ${seconds} Seconds ago`;    return label;}function makeUL(array) {    var list = document.createElement("ul");    for (var i = 0; i < array.length; i++) {        var item = document.createElement("li");        item.appendChild(document.createTextNode(array[i]));        list.appendChild(item);    }    return list;}function makeSelectBox(newId, isMultiple) {    var sel = document.createElement("select");    sel.setAttribute("id", newId);    sel.setAttribute("name", newId);    sel.multiple = isMultiple;    sel.style.width = "100%";    return sel;}function newSvg(id) {    const table_html = `<svg class="heartClass" id="heart${id}" viewBox="0 0 260 245"><path d="m56,237 74-228 74,228L10,96h240"/</svg>`;    return table_html;}function addFavouriteListenMethod(continueMethod, name) {    $('.' + name + 'Class').click(function () {        var clickedButton = $('#' + this.id);        console.log(clickedButton);        clickedButton.toggleClass("tryGreen");        let obj = {            'id': this.id.replace(name, ""),            isOn: clickedButton.hasClass('tryGreen')        };        continueMethod(obj);    });}function checkQueryString() {    const urlSearchParams = new URLSearchParams(window.location.search);    const params = Object.fromEntries(urlSearchParams.entries());    const firstKey = Object.keys(params)[0];    if (firstKey != null) {        let element = document.querySelector("#myInput");        element.value = [firstKey];        filterNow([firstKey]);    }}function filterNow(valuesset) {    const values = Array.from(valuesset);    if (values.length === 0) {        $("#myDIV .col").filter(function () {            $(this).slideDown();        });        return;    }    $("#myDIV .col").filter(function () {        var theCurrentText = jQuery(".searchText", this).text().toLowerCase();        var hello = values.map(o => jQuery(".searchText", this).text().toLowerCase().indexOf(o) > -1);        var theHellos = hello.every(o => o);        if (theHellos)            $(this).slideDown();        else            $(this).slideUp();    });}function initialiseInputBox(inputBoxName, filterContinuation) {    $(inputBoxName).on("keyup", function () {        var value = $(this).val().toLowerCase();        var values = value.split(' ')            .filter(o => !($.trim(o) == ''))            .filter(o => (o.length >= 3));        var set = new Set(values);        filterContinuation(set);    });    $('input[type=search]').on('search', function () {        $("#myDIV .col").filter(function () {            $(this).slideDown();        });    });}let mySet = new Set();var LineChartModule;(function (LineChartModule) {    function addLineChart(series, containerName) {        let options = {            series: series        };        var opts = Object.assign(Object.assign({}, options), lineChartOptions);        var container = $("#" + containerName);        container.highcharts(opts);    }    LineChartModule.addLineChart = addLineChart;    const lineChartOptions = {        title: {            text: null        },        chart: {            type: "line"        },        credits: {            enabled: false        },        xAxis: {            type: 'category'        },        yAxis: {            title: { text: "MWh" }        },        legend: {            enabled: false        },    };})(LineChartModule || (LineChartModule = {}));function setupGraph(dvName, data) {    Plotly.newPlot(dvName, data);}function updateGraph(dvName, data) {    Plotly.extendTraces(dvName, {        y: [data.y],        x: [data.x],    }, [0]);}const radioButtonCreate = {    setUpEventListenersRadioButton: function setUpEventListenersRadioButton(name, onChange) {        $(`input[name="${name}"]`).change(function () {            var v = $(`input[name='${name}']:checked`).val();            onChange(v);        });    },    setUpEventListenersCheckboxButton: function setUpEventListenersRadioButton(name, onChange) {        $(`input[name="${name}"]`).change(function () {            var v = Array.from($(`input[name='${name}']:checked`)).map((o) => o.value);            console.log(v, "v");            onChange(v);        });    },    getAnRadioButton: function getAnRadioButton(id, label, name) {        let checked = id === 0 ? "checked" : "";        var radioHtml = `<input class='btn-check' type='radio' id='${name}${id}' value='${id}' name='${name}' ${checked}/>`;        var labelHtml = `<label class='btn btn-outline-primary'  for='${name}${id}'>${label}</label>`;        return radioHtml + labelHtml;    },    getAnCheckButton: function (id, label, name) {        let checked = id === 0 ? "checked" : "";        var radioHtml = `<input class='btn-check' type='checkbox' id='${name}${id}' value='${id}' name='${name}' ${checked}/>`;        var labelHtml = `<label class='btn btn-outline-primary'  for='${name}${id}'>${label}</label>`;        return radioHtml + labelHtml;    }};function initialise(dataIn) {    addSelectBox("dv1");    $("#sel0").select2({        data: dataIn,        tags: true,        tokenSeparators: [",", " "],    });    $("#sel0").on("select2:unselect", function (e) {        var data1 = e.params.data.text;        mySet.delete(data1);        filterNow(mySet);    });    $("#sel0").on("select2:select", function (e) {        var data1 = e.params.data.text;        mySet.add(data1);        console.log(mySet);        filterNow(mySet);    });}function addSelectBox(containerId) {    var sel = document.createElement("select");    sel.setAttribute("id", "sel0");    sel.classList.add("js-example-tags");    sel.classList.add("js-example-theme-single");    sel.classList.add("jform-control");    sel.classList.add("cats");    sel.style.width = "100%";    sel.multiple = true;    document.getElementById(containerId).appendChild(sel);}function makeRepeatableDiv(n, formElementKey, includeButton) {    let div5 = document.createElement("div");    let div4 = document.createElement("div");    let div3 = document.createElement("div");    if (includeButton) {        let bt1 = document.createElement("button");        let textNode = document.createTextNode("Remove");        bt1.appendChild(textNode);        function removeMe() {            var result = confirm("Confirm removal of this role");            if (result == true) {                div5.parentNode.removeChild(div5);                document.getElementById("pageform").submit();            }        }        bt1.className = "btn btn-primary btn-sm flex-items";        bt1.addEventListener("click", removeMe);        div3.append(bt1);    }    div3.className = "flex-container clName mb-1 mt-3";    div3.id = "dvSection" + n;    if (typeof formElementKey != 'undefined' && formElementKey !== '') {    }    div4.className = "form-text text-muted";    div5.append(div3);    div5.append(div4);    return div5;}function addSectionToAll(n, selectedValue, formElementKey, containingDiv, includeButton) {    let div3 = makeRepeatableDiv(n, formElementKey, includeButton);    containingDiv.append(div3);    setupSelectToAll("dvSection" + n, n, selectedValue, formElementKey);    return div3;}function setupSelectToAll(divId, n, selectedValue, formElementKey) {    var newId = "sl" + n + "_" + formElementKey + "_" + selectedValue.replaceAll(" ", "¬");    let sel = makeSelectBox(newId, false);    console.log(newId);    document.getElementById(divId).insertBefore(sel, document.getElementById(divId).firstChild);    $("#" + newId).select2({        data: getDataNoGroups(cities),        tags: true,        tokenSeparators: [","],    });    if (typeof selectedValue != 'undefined' && selectedValue !== '') {        $("#" + newId).val(selectedValue.replaceAll(" ", "¬"));        $("#" + newId).trigger('change');    }    $("#" + newId).on("select2:select", function (e) {        console.log("here");        var data1 = e.params.data;        cities.add(data1.text);        addItemToAllDropdowns(data1, counter + 1);        document.getElementById("pageform").submit();    });}function setupSelect(divId, selectId, isMultiple, set, onChangeToList) {    let sel = makeSelectBox(selectId, isMultiple);    document.getElementById(divId).appendChild(sel);    let $sel = $(sel);    $sel.select2({        data: getData(set),        tags: true,        tokenSeparators: [","],    });    if (typeof onChangeToList != 'undefined') {        $sel.on("select2:select", function (e) {            var data1 = e.params.data;            set.add(data1.text);            onChangeToList();        });    }}function getData(tags) {    var tags2 = [...tags];    var data = tags2.sort().map((o, i) => {        return { id: o, text: o };    });    return data;}function addItemToAllDropdowns(data, n) {    for (let index = 0; index < n; index++) {        let theId = `#sel${index}`;        if ($(theId).find("option[value='" + data.id + "']").length) {        }        else {            var newOption = new Option(data.text, data.id, false, false);            $(theId).append(newOption);        }    }}function getDataNoGroups(tags) {    var tags2 = [...tags];    var data = tags2.sort().map((o, i) => {        return { id: o.replaceAll(" ", "¬"), text: o };    });    var data2 = [        { text: "", children: data },    ];    return data;}function setupRadioButtonFilterHandlerWithKeyLookup(buttonClass, cellClass, options) {    $("." + buttonClass).click(function () {        var theValue = $(this).val();        var key = options[theValue];        $('.' + cellClass).hide();        $('.' + cellClass + '[data-slider*=' + key + ']').show();        console.log("here in the click event");    });}function setupRadioButtonFilterHandlerWithClass(buttonClass, cellClass) {    $("." + buttonClass).click(function () {        let theValue = $(this).val().toLowerCase();        if (theValue.toLowerCase() == 'all')            $("div[data-all=" + cellClass + "]").show();        else            $("div[data-all=" + cellClass + "]").hide();        let theValueX = $("div[data-unique=" + theValue + "]");        if (this.checked)            $(theValueX).show();    });};function setupRadioButtonFilterHandlerWithClassMultiple(buttonClass, cellClass) {    $("." + buttonClass).click(function () {        let hool = $(".btn-check:checked").toArray().map(o => o.value.toLowerCase());        let theValue = $(this).val().toLowerCase();        let removedAll = hool.filter(x => x != "all");        if (removedAll.length == 0)            $("div[data-all=" + cellClass + "]").show();        else {            $("div[data-all=" + cellClass + "]").hide();            let testing = removedAll.reduce((previousValue, currentValue) => previousValue.filter("[data-unique*='" + currentValue + "']"), $("div[data-all=" + cellClass + "]"));            testing.show();        }    });};function hideShowCard(val, cellClass, dataSelector) {    let theValue = val.toLowerCase();    if (theValue.toLowerCase() == 'false')        $("div[data-all=" + cellClass + "]").show();    else {        $("div[data-all=" + cellClass + "]").hide();        let theValueX = $("div[data-" + dataSelector + "=" + val + "]");        $(theValueX).show();    }};function addNewToggleButtonFilter() {    var checkbox = document.querySelector("input[name=cbIsNewOnly]");    if (typeof checkbox != 'undefined') {        checkbox.addEventListener('change', function () {            if (this.checked) {                console.log("Checkbox is checked..");                hideShowCard("true", "card", "new");            }            else {                console.log("Checkbox is not checked..");                hideShowCard("false", "card", "new");            }        });    }}function coupledButtonAndInput() {    let checkbox = document.querySelector("input[name=cbIsNewOnly]");    let element = document.querySelector("#myInput");    $("#myInput").on("keyup", function () {        console.log("here but");    });    if (typeof checkbox != 'undefined') {        checkbox.addEventListener('change', function () {            console.log("Checkbox is here..");            element.value = '';        });    }}function $$(id) {    return document.querySelectorAll(id);}function setupPies() {    $$('.pie').forEach(function (pie) {        const size = 30;        var p = parseFloat(pie.textContent);        var NS = "http://www.w3.org/2000/svg";        var svg = document.createElementNS(NS, "svg");        var circle = document.createElementNS(NS, "circle");        var title = document.createElementNS(NS, "title");        circle.setAttribute("r", 16);        circle.setAttribute("cx", 16);        circle.setAttribute("cy", 16);        circle.setAttribute("stroke-dasharray", p + " 100");        svg.setAttribute("viewBox", "0 0 32 32");        pie.textContent = '';        svg.setAttribute("class", "piecharts");        svg.appendChild(title);        svg.appendChild(circle);        pie.appendChild(svg);    });}var TableFilterModule;(function (TableFilterModule) {    function initialiseNumberInputBox(inputBoxName, filterContinuation) {        $(inputBoxName).on("change", function () {            var value = $(this).val().toLowerCase();            var values = parseFloat(value);            filterContinuation(values);        });    }    TableFilterModule.initialiseNumberInputBox = initialiseNumberInputBox;    function filterTable(minV) {        [...$("table > tbody > tr")].forEach(function (x) {            let vol = parseFloat($(".searchText", $(x)).text().toLowerCase());            if (vol > minV)                $(x).slideDown();            else                $(x).slideUp();        });    }    TableFilterModule.filterTable = filterTable;})(TableFilterModule || (TableFilterModule = {}));var ThemeModule;(function (ThemeModule) {    function addThemeSwitchComponent() {        const theme = localStorage.getItem("theme-color");        const isDarkThemeAlready = theme === "dark" ? true : false;        document.body.classList.toggle("darkTheme", isDarkThemeAlready);        document.getElementById("swTheme").checked = isDarkThemeAlready;        console.log(theme);        document.getElementById("swTheme").onchange = (e) => {            console.log();            let themeColour = e.currentTarget.checked ? "dark" : "light";            localStorage.setItem("theme-color", themeColour);            document.body.classList.toggle("darkTheme", e.currentTarget.checked);        };    }    ThemeModule.addThemeSwitchComponent = addThemeSwitchComponent;    function initialisThemeSwitchComponentVar() {        const theme = localStorage.getItem("theme-color");        const isDarkThemeAlready = theme === "dark" ? true : false;        const themeName = isDarkThemeAlready ? "darkTheme" : "lightTheme";        console.log(theme);        var s = [...document.styleSheets].find((o) => o.href.indexOf("colours.css") !== -1);        console.log(s);        const s2 = [...s.cssRules].find((o) => o.selectorText.indexOf(themeName) !== -1);        const root = document.querySelector(":root");        [...s2.style].forEach((key, i) => {            var val = s2.styleMap.get(key)[0];            console.log(key, val);            root.style.setProperty(key, val);        });    }    ThemeModule.initialisThemeSwitchComponentVar = initialisThemeSwitchComponentVar;    function addThemeSwitchComponentVar() {        const theme = localStorage.getItem("theme-color");        const isDarkThemeAlready = theme === "dark" ? true : false;        document.getElementById("swTheme").checked = isDarkThemeAlready;        document.getElementById("swTheme").onchange = (e) => {            let themeColour = e.currentTarget.checked ? "dark" : "light";            localStorage.setItem("theme-color", themeColour);            initialisThemeSwitchComponentVar();        };    }    ThemeModule.addThemeSwitchComponentVar = addThemeSwitchComponentVar;    function setTheme() {        let theme = localStorage.getItem("theme-color");        if (!theme)            theme = 'light';        document.documentElement.dataset.appliedMode = theme;    }    ThemeModule.setTheme = setTheme;    function initialisecpSwitchBox() {        let theme = localStorage.getItem("theme-color");        if (!theme)            theme = 'light';        const isDarkThemeAlready = theme === "dark" ? true : false;        if (isDarkThemeAlready)            document.getElementById("swTheme").setAttribute("checked", "checked");        setTheme();        document.getElementById("swTheme").onchange = (e) => {            let themeColour = e.currentTarget.checked ? "dark" : "light";            localStorage.setItem("theme-color", themeColour);            setTheme();        };    }    ThemeModule.initialisecpSwitchBox = initialisecpSwitchBox;})(ThemeModule || (ThemeModule = {}));function rssUrlSubmission() {    let text = $('#fname').val();    console.log(text);    $.get(`https://script.google.com/macros/s/AKfycbx5hs19W2lPsXwKIJOsuacm8O6vUI-Dd7JKflBJc61SAq_rvb3wBpX_gy5ACy_voyN4hg/exec?page=${text}&callback=?`);    event.preventDefault();    event.stopPropagation();    var thanksBox = document.getElementById("dvThanks");    thanksBox.innerHTML = "thank you for submitting your xml feed";}var UtilsModule;(function (UtilsModule) {    function runATimeLoopFunction(func, n) {        function runATimeLoop(z) {            setTimeout(() => {                func(z);            }, 100 * z);        }        for (let i = 0; i < n; i++) {            runATimeLoop(i + 1);        }    }    UtilsModule.runATimeLoopFunction = runATimeLoopFunction;})(UtilsModule || (UtilsModule = {}));